#Possible options are rprop and backprop
train.algorithm = rprop

train.algorithm.backprop.ni = 0.0001

train.algorithm.rprop.kMinus = 0.5
train.algorithm.rprop.kPlus = 1.2
train.algorithm.rprop.deltaInitial = 0.1
train.algorithm.rprop.deltaMin = 1e-9
train.algorithm.rprop.deltaMax = 10

#Possible options are regular and opencl
train.implementation = opencl

#One of org.jocl.CL.CL_DEVICE_TYPE_GPU (4), org.jocl.CL.CL_DEVICE_TYPE_CPU (2) constants values
train.implementation.opencl.device = 4

train.iterations = 1000

train.logger.iterationMod = 100

train.weights.low = -1
train.weights.high = 1

train.seed = -1

#CSV file to train data
train.data = data/sin_cos.csv
#train.data = data/grid.csv

#File where raw weights are stored
network.weights = data/sin_cos.net
#network.weights = data/grid.net

#Dimensions where first number is input neurons count and last is output neurons count
#Output neurons count is number of classes - 1
network.dimensions = 18x24x12x3
#network.dimensions = 10x15x7x3

#Possible options are sin_cos or grid
display.sampler = sin_cos
#display.sampler = grid

display.classes = ALPHA,BETA,GAMMA,OMEGA

display.sampler.n = 10

display.sampler.grid.n = 12